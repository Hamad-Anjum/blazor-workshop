@page "/checkout"
@attribute [Authorize]
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider

<div class="main">
    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>

        <button type="submit" class="checkout-button btn btn-warning" disabled="@isSubmitting">
            Place order
        </button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    bool isSubmitting;

    async Task PlaceOrder()
    {
        isSubmitting = true;

        var tokenResponse = await TokenProvider.RequestAccessToken();
        if (tokenResponse.TryGetToken(out var token))
        {
            try
            {
                var client = CreateAuthenticatedClient(token);
                var newOrderId = await client.PostJsonAsync<int>("orders", OrderState.Order);
                OrderState.ResetOrder();
                NavigationManager.NavigateTo($"myorders/{newOrderId}");
            }
            finally
            {
                isSubmitting = false;
            }
        }
        else
        {
            NavigationManager.NavigateTo(tokenResponse.RedirectUrl);
        }
    }

    private HttpClient CreateAuthenticatedClient(AccessToken token)
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri(NavigationManager.BaseUri);
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
        return client;
    }
}
